name: Build All Images

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images even if no changes detected'
        required: false
        type: boolean
        default: false
  schedule:
    # Weekly rebuild on Sundays at 2 AM UTC for security updates
    - cron: '0 2 * * 0'
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/build-all.yml'
      - '.github/workflows/shared-build.yml'

jobs:
  # Build base image first
  build-base:
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build-base.yml
    secrets: inherit

  # Build all language images in parallel using matrix (depends on base)
  build-languages:
    needs: build-base
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        language: [python, go, node, c, cpp, jdk, jre, rust, dotnet-sdk, dotnet-runtime]
        include:
          - language: python
            dockerfile: Dockerfile.python
            size_target: '<100MB'
            test_command: 'python3 test.py'
            test_content: 'print("Test successful")'
            test_extension: 'py'
          - language: go
            dockerfile: Dockerfile.go
            size_target: '<60MB'
            test_command: 'go run test.go'
            test_content: 'package main; import "fmt"; func main() { fmt.Println("Test successful") }'
            test_extension: 'go'
          - language: node
            dockerfile: Dockerfile.node
            size_target: '<100MB'
            test_command: 'node test.js'
            test_content: 'console.log("Test successful")'
            test_extension: 'js'
          - language: c
            dockerfile: Dockerfile.c
            size_target: '<250MB'
            test_command: 'sh -c "gcc test.c -o test && ./test"'
            test_content: |
              #include <stdio.h>
              int main() { 
                  printf("Test successful\n"); 
                  return 0; 
              }
            test_extension: 'c'
          - language: cpp
            dockerfile: Dockerfile.cpp
            size_target: '<250MB'
            test_command: 'sh -c "g++ test.cpp -o test && ./test"'
            test_content: |
              #include <iostream>
              int main() { 
                  std::cout << "Test successful" << std::endl; 
                  return 0; 
              }
            test_extension: 'cpp'
          - language: jdk
            dockerfile: Dockerfile.jdk
            size_target: '<380MB'
            test_command: 'sh -c "javac Test.java && java Test"'
            test_content: |
              public class Test { 
                  public static void main(String[] args) { 
                      System.out.println("Test successful"); 
                  } 
              }
            test_extension: 'java'
          - language: jre
            dockerfile: Dockerfile.jre
            size_target: '<220MB'
            test_command: 'echo "JRE runtime only - requires pre-compiled .class files"'
            test_content: ''
            test_extension: 'txt'
          - language: rust
            dockerfile: Dockerfile.rust
            size_target: '<250MB'
            test_command: 'sh -c "rustc test.rs && ./test"'
            test_content: 'fn main() { println!("Test successful"); }'
            test_extension: 'rs'
          - language: dotnet-sdk
            dockerfile: Dockerfile.dotnet-sdk
            size_target: '<450MB'
            test_command: 'sh -c "cd /tmp && dotnet new console -n test --force && echo \"Console.WriteLine(\\\"Test successful\\\");\" > /tmp/test/Program.cs && cd /tmp/test && dotnet run"'
            test_content: ''
            test_extension: 'txt'
          - language: dotnet-runtime
            dockerfile: Dockerfile.dotnet-runtime
            size_target: '<180MB'
            test_command: 'echo ".NET runtime only - requires pre-compiled .dll files"'
            test_content: ''
            test_extension: 'txt'
    uses: ./.github/workflows/shared-build.yml
    with:
      image_name: ${{ matrix.language }}
      dockerfile_path: images/${{ matrix.dockerfile }}
      size_target: ${{ matrix.size_target }}
      test_command: ${{ matrix.test_command }}
      test_file_content: ${{ matrix.test_content }}
      test_file_extension: ${{ matrix.test_extension }}
    secrets: inherit

  # Comprehensive reporting after all builds complete
  report:
    needs: [build-base, build-languages]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary Report
        run: |
          echo "## PetriBench Build All - Complete Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status | Target |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Base image
          if [ "${{ needs.build-base.result }}" = "success" ]; then
            echo "| petribench-base | ‚úÖ Success | <40MB |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| petribench-base | ‚ùå Failed | <40MB |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Language images matrix results
          if [ "${{ needs.build-languages.result }}" = "success" ]; then
            echo "| petribench-python | ‚úÖ Success | <100MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-go | ‚úÖ Success | <60MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-node | ‚úÖ Success | <100MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-c | ‚úÖ Success | <250MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-cpp | ‚úÖ Success | <250MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-jdk | ‚úÖ Success | <380MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-jre | ‚úÖ Success | <220MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-rust | ‚úÖ Success | <250MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-dotnet-sdk | ‚úÖ Success | <450MB |" >> $GITHUB_STEP_SUMMARY
            echo "| petribench-dotnet-runtime | ‚úÖ Success | <180MB |" >> $GITHUB_STEP_SUMMARY
            language_success=10
          else
            echo "| petribench-languages | ‚ùå Failed | Various |" >> $GITHUB_STEP_SUMMARY
            echo "Note: Matrix job failed - check individual matrix results in logs" >> $GITHUB_STEP_SUMMARY
            language_success=0
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary Statistics" >> $GITHUB_STEP_SUMMARY
          
          base_success=0
          if [ "${{ needs.build-base.result }}" = "success" ]; then
            base_success=1
          fi
          
          total_success=$((base_success + language_success))
          total_count=11
          
          echo "- **Total Images**: $total_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Successful Builds**: $total_success" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed Builds**: $((total_count - total_success))" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: $(( total_success * 100 / total_count ))%" >> $GITHUB_STEP_SUMMARY
          
          if [ $total_success -eq $total_count ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **All images built successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Some builds failed. Check individual workflow logs.**" >> $GITHUB_STEP_SUMMARY
          fi