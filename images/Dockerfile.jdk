# Multi-stage build for Java JDK - Separate build tools from runtime
# Build stage: Full JDK for compilation
FROM ghcr.io/kengggg/petribench-base:latest AS builder

# Switch to root to install packages
USER root

# Install OpenJDK 17 JDK + ca-certificates for Maven/Gradle SSL support
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        openjdk-17-jdk-headless \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch to tester user for builds
USER tester
WORKDIR /workspace

# Copy source code for build
COPY --chown=tester:tester . .

# Build Java programs if they exist
# Compile .java files to .class files for runtime
RUN if [ -f Benchmark.java ]; then \
        echo "Compiling Benchmark.java..."; \
        javac Benchmark.java; \
        cp Benchmark.class Program.class; \
    elif [ -f Program.java ]; then \
        echo "Compiling Program.java..."; \
        javac Program.java; \
        cp Program.class Benchmark.class; \
    elif [ -f pom.xml ]; then \
        echo "Building Maven project..."; \
        # For Maven projects, we need Maven, but let's handle simple cases first
        find . -name "*.java" -exec javac {} \;; \
        find . -name "*.class" | head -1 | xargs -I {} cp {} ./Program.class; \
        cp Program.class Benchmark.class; \
    elif [ -f build.gradle ]; then \
        echo "Building Gradle project..."; \
        # For Gradle projects, similar approach
        find . -name "*.java" -exec javac {} \;; \
        find . -name "*.class" | head -1 | xargs -I {} cp {} ./Program.class; \
        cp Program.class Benchmark.class; \
    else \
        echo "No Java source files found, creating placeholder class..."; \
        echo 'public class Program { public static void main(String[] args) { System.out.println("No Java program found"); } }' > Program.java; \
        javac Program.java; \
        cp Program.class Benchmark.class; \
    fi

# Runtime stage: Minimal JRE runtime without JDK
FROM ghcr.io/kengggg/petribench-base:latest

# Switch to root to install packages
USER root

# Install OpenJDK 17 JRE + ca-certificates (much smaller than JDK)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        openjdk-17-jre-headless \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy workspace from build stage (includes compiled classes and any jar files)
COPY --from=builder --chown=tester:tester /workspace /workspace

# Switch back to non-root user
USER tester

# Set working directory for volume mounts
WORKDIR /workspace

# Add Java-specific labels
LABEL org.opencontainers.image.description="Ultra-minimal Java JDK runtime for memory benchmarking with RSS/PSS/USS measurement"
LABEL java.version="17"
LABEL java.type="jdk-optimized"
LABEL build.type="multi-stage"
LABEL optimization.size="57% reduction vs single-stage"

# Default command: Run pre-compiled Java classes with RSS measurement
CMD ["/bin/sh", "-c", "if [ -f /workspace/Benchmark.class ]; then /usr/bin/time -v java -cp /workspace Benchmark; elif [ -f /workspace/Program.class ]; then /usr/bin/time -v java -cp /workspace Program; else echo 'PetriBench Java JDK Runtime (Multi-stage Optimized)'; echo 'Available tools:'; echo '  - java ($(java -version 2>&1 | head -1))'; echo '  - Pre-compiled Java classes'; echo '  - /usr/bin/time (GNU time for RSS measurement)'; echo '  - measure_memory (PSS/USS measurement)'; echo '  - /proc/self/smaps_rollup (direct proc parsing)'; echo '  - measure_memory --help (smem2 replacement)'; echo ''; echo 'Size: ~200MB (vs ~460MB single-stage, 57% reduction)'; echo 'Runtime: JRE + pre-compiled classes, no JDK compilation tools'; echo 'Debian: Full environment preserved for apt-get extensions'; echo 'Classes: Pre-compiled from .java sources if present'; echo ''; echo 'Usage examples:'; echo '  # Run pre-compiled classes:'; echo '  docker run petribench-jdk'; echo '  docker run petribench-jdk /usr/bin/time -v java -cp /workspace Benchmark'; echo '  # Memory measurement:'; echo '  docker run petribench-jdk sh -c \"java -cp /workspace Benchmark & measure_memory -P \\$!\"; '; echo '  # Build custom program:'; echo '  docker build -f Dockerfile.jdk -t petribench-jdk .'; fi"]