# Multi-stage build for Rust - Separate build toolchain from runtime
# Build stage: Full Rust toolchain with rustc + cargo
FROM ghcr.io/kengggg/petribench-base:latest AS builder

# Switch to root to install packages
USER root

# Install Rust compiler + cargo + ca-certificates for cargo SSL support
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        rustc \
        cargo \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch to tester user for builds
USER tester
WORKDIR /workspace

# Copy source code for build
COPY --chown=tester:tester . .

# Build Rust programs if they exist
# For standalone .rs files, compile to static binary
# For Cargo projects, build release binary
RUN if [ -f benchmark.rs ]; then \
        echo "Building benchmark.rs as static binary..."; \
        rustc --edition=2021 -C opt-level=3 -C target-cpu=native benchmark.rs -o benchmark; \
        cp benchmark program; \
    elif [ -f program.rs ]; then \
        echo "Building program.rs as static binary..."; \
        rustc --edition=2021 -C opt-level=3 -C target-cpu=native program.rs -o program; \
        cp program benchmark; \
    elif [ -f Cargo.toml ]; then \
        echo "Building Cargo project..."; \
        cargo build --release; \
        # Copy the binary to workspace root with known name
        if [ -f target/release/benchmark ]; then \
            cp target/release/benchmark ./benchmark; \
            cp target/release/benchmark ./program; \
        elif [ -f target/release/program ]; then \
            cp target/release/program ./program; \
            cp target/release/program ./benchmark; \
        else \
            # Find the first binary in release directory
            find target/release -maxdepth 1 -type f -executable | head -1 | xargs -I {} cp {} ./program; \
            cp ./program ./benchmark; \
        fi; \
    else \
        echo "No Rust source files found, creating placeholder binary..."; \
        echo 'fn main() { println!("No Rust program found"); }' > placeholder.rs; \
        rustc --edition=2021 -C opt-level=3 placeholder.rs -o program; \
        cp program benchmark; \
    fi

# Runtime stage: Minimal runtime without Rust toolchain
FROM ghcr.io/kengggg/petribench-base:latest

# Copy only the compiled binary from build stage
COPY --from=builder --chown=tester:tester /workspace/benchmark /usr/local/bin/benchmark
COPY --from=builder --chown=tester:tester /workspace/program /usr/local/bin/program

# Copy source code for reference (optional)
COPY --from=builder --chown=tester:tester /workspace /workspace

# Switch back to non-root user
USER tester

# Set working directory for volume mounts
WORKDIR /workspace

# Add Rust-specific labels
LABEL org.opencontainers.image.description="Ultra-minimal Rust runtime for memory benchmarking with RSS/PSS/USS measurement"
LABEL rust.version="1.63+"
LABEL build.type="multi-stage"
LABEL optimization.size="85% reduction vs single-stage"

# Default command: Run pre-compiled binary with RSS measurement
CMD ["/bin/sh", "-c", "if [ -f /usr/local/bin/benchmark ]; then /usr/bin/time -v /usr/local/bin/benchmark; elif [ -f /usr/local/bin/program ]; then /usr/bin/time -v /usr/local/bin/program; else echo 'PetriBench Rust Runtime (Multi-stage Optimized)'; echo 'Available tools:'; echo '  - Pre-compiled Rust binary (static)'; echo '  - /usr/bin/time (GNU time for RSS measurement)'; echo '  - measure_memory (PSS/USS measurement)'; echo '  - /proc/self/smaps_rollup (direct proc parsing)'; echo '  - measure_memory --help (smem2 replacement)'; echo ''; echo 'Size: ~110MB (vs ~780MB single-stage, 85% reduction)'; echo 'Runtime: Pre-compiled static binary, no Rust toolchain'; echo 'Debian: Full environment preserved for apt-get extensions'; echo 'Binary: Optimized release build with native CPU features'; echo ''; echo 'Usage examples:'; echo '  # Run pre-compiled binary:'; echo '  docker run petribench-rust'; echo '  docker run petribench-rust /usr/bin/time -v /usr/local/bin/benchmark'; echo '  # Memory measurement:'; echo '  docker run petribench-rust sh -c \"/usr/local/bin/benchmark & measure_memory -P \\$!\"; '; echo '  # Build custom binary:'; echo '  docker build -f Dockerfile.rust -t petribench-rust .'; fi"]