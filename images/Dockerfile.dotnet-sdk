# Multi-stage build for .NET SDK - Separate build tools from runtime
# Build stage: Full .NET SDK for compilation
FROM ghcr.io/kengggg/petribench-base:latest AS builder

# Switch to root to install packages
USER root

# Install .NET 8 SDK (includes runtime and compiler)
# Using direct download method instead of package manager for better compatibility
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget \
        ca-certificates \
        libicu-dev \
        libssl-dev \
        && \
    case $(dpkg --print-architecture) in \
        amd64) ARCH=x64 ;; \
        arm64) ARCH=arm64 ;; \
        *) echo "Unsupported architecture" && exit 1 ;; \
    esac && \
    wget -O dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Sdk/8.0.404/dotnet-sdk-8.0.404-linux-$ARCH.tar.gz && \
    mkdir -p /usr/share/dotnet && \
    tar -zxf dotnet.tar.gz -C /usr/share/dotnet && \
    rm dotnet.tar.gz && \
    ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch to tester user for builds
USER tester
WORKDIR /workspace

# Copy source code for build
COPY --chown=tester:tester . .

# Build .NET programs if they exist
# Compile .cs files to .dll files for runtime
RUN if [ -f Benchmark.cs ]; then \
        echo "Compiling Benchmark.cs..."; \
        dotnet new console -n benchmark --force; \
        cp Benchmark.cs benchmark/Program.cs; \
        cd benchmark && dotnet build -c Release -o /workspace/build; \
        cp /workspace/build/benchmark.dll /workspace/Program.dll; \
        cp /workspace/build/benchmark.dll /workspace/Benchmark.dll; \
        cp /workspace/build/benchmark.runtimeconfig.json /workspace/Program.runtimeconfig.json; \
        cp /workspace/build/benchmark.runtimeconfig.json /workspace/Benchmark.runtimeconfig.json; \
    elif [ -f Program.cs ]; then \
        echo "Compiling Program.cs..."; \
        dotnet new console -n program --force; \
        cp Program.cs program/Program.cs; \
        cd program && dotnet build -c Release -o /workspace/build; \
        cp /workspace/build/program.dll /workspace/Program.dll; \
        cp /workspace/build/program.dll /workspace/Benchmark.dll; \
        cp /workspace/build/program.runtimeconfig.json /workspace/Program.runtimeconfig.json; \
        cp /workspace/build/program.runtimeconfig.json /workspace/Benchmark.runtimeconfig.json; \
    elif [ -f *.csproj ]; then \
        echo "Building .NET project..."; \
        dotnet build -c Release -o /workspace/build; \
        find /workspace/build -name "*.dll" | head -1 | xargs -I {} cp {} /workspace/Program.dll; \
        cp /workspace/Program.dll /workspace/Benchmark.dll; \
        find /workspace/build -name "*.runtimeconfig.json" | head -1 | xargs -I {} cp {} /workspace/Program.runtimeconfig.json; \
        cp /workspace/Program.runtimeconfig.json /workspace/Benchmark.runtimeconfig.json; \
    else \
        echo "No .NET source files found, creating placeholder program..."; \
        dotnet new console -n placeholder --force; \
        echo 'Console.WriteLine("No .NET program found");' > placeholder/Program.cs; \
        cd placeholder && dotnet build -c Release -o /workspace/build; \
        cp /workspace/build/placeholder.dll /workspace/Program.dll; \
        cp /workspace/build/placeholder.dll /workspace/Benchmark.dll; \
        cp /workspace/build/placeholder.runtimeconfig.json /workspace/Program.runtimeconfig.json; \
        cp /workspace/build/placeholder.runtimeconfig.json /workspace/Benchmark.runtimeconfig.json; \
    fi

# Runtime stage: Minimal .NET runtime without SDK
FROM ghcr.io/kengggg/petribench-base:latest

# Switch to root to install packages
USER root

# Install .NET 8 runtime only (much smaller than SDK)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget \
        ca-certificates \
        libicu-dev \
        libssl-dev \
        && \
    case $(dpkg --print-architecture) in \
        amd64) ARCH=x64 ;; \
        arm64) ARCH=arm64 ;; \
        *) echo "Unsupported architecture" && exit 1 ;; \
    esac && \
    wget -O dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Runtime/8.0.10/dotnet-runtime-8.0.10-linux-$ARCH.tar.gz && \
    mkdir -p /usr/share/dotnet && \
    tar -zxf dotnet.tar.gz -C /usr/share/dotnet && \
    rm dotnet.tar.gz && \
    ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy workspace from build stage (includes compiled assemblies)
COPY --from=builder --chown=tester:tester /workspace /workspace

# Switch back to non-root user
USER tester

# Set working directory for volume mounts
WORKDIR /workspace

# Add .NET-specific labels
LABEL org.opencontainers.image.description="Ultra-minimal .NET SDK runtime for memory benchmarking with RSS/PSS/USS measurement"
LABEL dotnet.version="8.0"
LABEL dotnet.type="sdk-optimized"
LABEL build.type="multi-stage"
LABEL optimization.size="64% reduction vs single-stage"

# Default command: Run pre-compiled .NET assemblies with RSS measurement
CMD ["/bin/sh", "-c", "if [ -f /workspace/Benchmark.dll ]; then /usr/bin/time -v dotnet /workspace/Benchmark.dll; elif [ -f /workspace/Program.dll ]; then /usr/bin/time -v dotnet /workspace/Program.dll; else echo 'PetriBench .NET SDK Runtime (Multi-stage Optimized)'; echo 'Available tools:'; echo '  - dotnet ($(dotnet --version))'; echo '  - Pre-compiled .NET assemblies'; echo '  - /usr/bin/time (GNU time for RSS measurement)'; echo '  - measure_memory (PSS/USS measurement)'; echo '  - /proc/self/smaps_rollup (direct proc parsing)'; echo '  - measure_memory --help (smem2 replacement)'; echo ''; echo 'Size: ~300MB (vs ~840MB single-stage, 64% reduction)'; echo 'Runtime: .NET runtime + pre-compiled assemblies, no SDK compilation tools'; echo 'Debian: Full environment preserved for apt-get extensions'; echo 'Assemblies: Pre-compiled from .cs sources if present'; echo ''; echo 'Usage examples:'; echo '  # Run pre-compiled assemblies:'; echo '  docker run petribench-dotnet-sdk'; echo '  docker run petribench-dotnet-sdk /usr/bin/time -v dotnet /workspace/Benchmark.dll'; echo '  # Memory measurement:'; echo '  docker run petribench-dotnet-sdk sh -c \"dotnet /workspace/Benchmark.dll & measure_memory -P \\$!\"; '; echo '  # Build custom program:'; echo '  docker build -f Dockerfile.dotnet-sdk -t petribench-dotnet-sdk .'; fi"]