# Multi-stage build for .NET Runtime - Optimized runtime-only image
# Build stage: Minimal setup for copying .dll files
FROM ghcr.io/kengggg/petribench-base:latest AS builder

# Switch to tester user for file operations
USER tester
WORKDIR /workspace

# Copy source code for build
COPY --chown=tester:tester . .

# Prepare runtime files (copy .dll files, create placeholder if none exist)
RUN if [ -f Benchmark.dll ]; then \
        echo "Using existing Benchmark.dll..."; \
        cp Benchmark.dll Program.dll; \
    elif [ -f Program.dll ]; then \
        echo "Using existing Program.dll..."; \
        cp Program.dll Benchmark.dll; \
    elif [ -f *.exe ]; then \
        echo "Found .exe files, copying..."; \
        # .exe files will be copied separately \
        echo ".exe files present for runtime"; \
    else \
        echo "No .NET assembly files found, creating placeholder..."; \
        echo "No pre-compiled assemblies available. Mount .dll files to run .NET programs." > README.txt; \
    fi

# Runtime stage: Minimal .NET runtime
FROM ghcr.io/kengggg/petribench-base:latest

# Switch to root to install packages
USER root

# Install .NET 8 runtime only (smaller than SDK)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget \
        ca-certificates \
        libicu-dev \
        libssl-dev \
        && \
    case $(dpkg --print-architecture) in \
        amd64) ARCH=x64 ;; \
        arm64) ARCH=arm64 ;; \
        *) echo "Unsupported architecture" && exit 1 ;; \
    esac && \
    wget -O dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Runtime/8.0.10/dotnet-runtime-8.0.10-linux-$ARCH.tar.gz && \
    mkdir -p /usr/share/dotnet && \
    tar -zxf dotnet.tar.gz -C /usr/share/dotnet && \
    rm dotnet.tar.gz && \
    ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy workspace from build stage (includes assemblies, exe files, and other files)
COPY --from=builder --chown=tester:tester /workspace /workspace

# Switch back to non-root user
USER tester

# Set working directory for volume mounts
WORKDIR /workspace

# Add .NET-specific labels
LABEL org.opencontainers.image.description="Ultra-minimal .NET runtime for memory benchmarking with RSS/PSS/USS measurement"
LABEL dotnet.version="8.0"
LABEL dotnet.type="runtime-optimized"
LABEL build.type="multi-stage"
LABEL optimization.size="20% reduction vs single-stage"

# Default command: Run .NET assemblies or exe files with RSS measurement
CMD ["/bin/sh", "-c", "if [ -f /workspace/Benchmark.dll ]; then /usr/bin/time -v dotnet /workspace/Benchmark.dll; elif [ -f /workspace/Program.dll ]; then /usr/bin/time -v dotnet /workspace/Program.dll; elif [ -f /workspace/*.exe ]; then /usr/bin/time -v dotnet /workspace/*.exe; else echo 'PetriBench .NET Runtime (Multi-stage Optimized)'; echo 'Available tools:'; echo '  - dotnet ($(dotnet --version))'; echo '  - .NET runtime environment only'; echo '  - /usr/bin/time (GNU time for RSS measurement)'; echo '  - measure_memory (PSS/USS measurement)'; echo '  - /proc/self/smaps_rollup (direct proc parsing)'; echo '  - measure_memory --help (smem2 replacement)'; echo ''; echo 'Size: ~250MB (vs ~305MB single-stage, 20% reduction)'; echo 'Runtime: .NET runtime only, no compilation tools'; echo 'Debian: Full environment preserved for apt-get extensions'; echo 'Execution: Supports .dll files and .exe files'; echo ''; echo 'Usage examples:'; echo '  # Run assembly files:'; echo '  docker run -v Program.dll:/workspace/Program.dll petribench-dotnet-runtime'; echo '  docker run -v Program.dll:/workspace/Program.dll petribench-dotnet-runtime /usr/bin/time -v dotnet Program.dll'; echo '  # Run exe files:'; echo '  docker run -v program.exe:/workspace/program.exe petribench-dotnet-runtime dotnet program.exe'; echo '  # Memory measurement:'; echo '  docker run petribench-dotnet-runtime sh -c \"dotnet /workspace/Program.dll & measure_memory -P \\$!\"; '; fi"]