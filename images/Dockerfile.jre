# Multi-stage build for Java JRE - Optimized runtime-only image
# Build stage: Minimal setup for copying .class files
FROM ghcr.io/kengggg/petribench-base:latest AS builder

# Switch to tester user for file operations
USER tester
WORKDIR /workspace

# Copy source code for build
COPY --chown=tester:tester . .

# Prepare runtime files (copy .class files, create placeholder if none exist)
RUN if [ -f Benchmark.class ]; then \
        echo "Using existing Benchmark.class..."; \
        cp Benchmark.class Program.class; \
    elif [ -f Program.class ]; then \
        echo "Using existing Program.class..."; \
        cp Program.class Benchmark.class; \
    elif [ -f *.jar ]; then \
        echo "Found jar files, copying..."; \
        # Jar files will be copied separately \
        echo "Jar files present for runtime"; \
    else \
        echo "No Java class files found, creating placeholder..."; \
        echo 'public class Program { public static void main(String[] args) { System.out.println("No Java program found - JRE runtime only"); } }' > Program.java; \
        # We can't compile here since we don't have JDK, so we'll need to handle this differently
        # For now, just create a note file
        echo "No pre-compiled classes available. Mount .class files or .jar files to run Java programs." > README.txt; \
    fi

# Runtime stage: Minimal JRE runtime
FROM ghcr.io/kengggg/petribench-base:latest

# Switch to root to install packages
USER root

# Install OpenJDK 17 JRE + ca-certificates (smaller than JDK)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        openjdk-17-jre-headless \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy workspace from build stage (includes classes, jar files, and other files)
COPY --from=builder --chown=tester:tester /workspace /workspace

# Switch back to non-root user
USER tester

# Set working directory for volume mounts
WORKDIR /workspace

# Add Java-specific labels
LABEL org.opencontainers.image.description="Ultra-minimal Java JRE runtime for memory benchmarking with RSS/PSS/USS measurement"
LABEL java.version="17"
LABEL java.type="jre-optimized"
LABEL build.type="multi-stage"
LABEL optimization.size="53% reduction vs single-stage"

# Default command: Run Java classes or jar files with RSS measurement
CMD ["/bin/sh", "-c", "if [ -f /workspace/Benchmark.class ]; then /usr/bin/time -v java -cp /workspace Benchmark; elif [ -f /workspace/Program.class ]; then /usr/bin/time -v java -cp /workspace Program; elif [ -f /workspace/*.jar ]; then /usr/bin/time -v java -jar /workspace/*.jar; else echo 'PetriBench Java JRE Runtime (Multi-stage Optimized)'; echo 'Available tools:'; echo '  - java ($(java -version 2>&1 | head -1))'; echo '  - JRE runtime environment only'; echo '  - /usr/bin/time (GNU time for RSS measurement)'; echo '  - measure_memory (PSS/USS measurement)'; echo '  - /proc/self/smaps_rollup (direct proc parsing)'; echo '  - measure_memory --help (smem2 replacement)'; echo ''; echo 'Size: ~180MB (vs ~380MB single-stage, 53% reduction)'; echo 'Runtime: JRE only, no compilation tools'; echo 'Debian: Full environment preserved for apt-get extensions'; echo 'Execution: Supports .class files and .jar files'; echo ''; echo 'Usage examples:'; echo '  # Run class files:'; echo '  docker run -v Program.class:/workspace/Program.class petribench-jre'; echo '  docker run -v Program.class:/workspace/Program.class petribench-jre /usr/bin/time -v java Program'; echo '  # Run jar files:'; echo '  docker run -v program.jar:/workspace/program.jar petribench-jre java -jar program.jar'; echo '  # Memory measurement:'; echo '  docker run petribench-jre sh -c \"java -cp /workspace Program & measure_memory -P \\$!\"; '; fi"]