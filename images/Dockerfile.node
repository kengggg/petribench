# Multi-stage build for Node.js - Separate build tools from runtime
# Build stage: Full Node.js environment with npm and build tools
FROM ghcr.io/kengggg/petribench-base:latest AS builder

# Switch to root to install packages
USER root

# Install Node.js with npm and build tools for native modules
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        nodejs \
        npm \
        build-essential \
        python3 \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch to tester user for package operations
USER tester
WORKDIR /workspace

# Copy package.json and source code for build
COPY --chown=tester:tester . .

# Install and build Node.js packages if package.json exists
RUN if [ -f package.json ]; then \
        echo "Installing Node.js packages from package.json..."; \
        npm install --production --no-cache --no-fund --no-audit; \
        echo "Cleaning up npm cache..."; \
        npm cache clean --force; \
    else \
        echo "No package.json found, skipping package installation"; \
        mkdir -p node_modules; \
    fi

# Runtime stage: Minimal Node.js runtime without build tools
FROM ghcr.io/kengggg/petribench-base:latest

# Switch to root to install packages
USER root

# Install Node.js runtime + npm + ca-certificates (for npm SSL support)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        nodejs \
        npm \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy installed packages from build stage
COPY --from=builder --chown=tester:tester /workspace/node_modules /workspace/node_modules

# Copy source code
COPY --from=builder --chown=tester:tester /workspace /workspace

# Switch back to non-root user
USER tester

# Set working directory for volume mounts
WORKDIR /workspace

# Add Node.js-specific labels
LABEL org.opencontainers.image.description="Ultra-minimal Node.js runtime for memory benchmarking with RSS/PSS/USS measurement"
LABEL node.version="20+"
LABEL build.type="multi-stage"
LABEL optimization.size="25% reduction vs single-stage"

# Default command: Show available tools and runtime info
CMD ["/bin/sh", "-c", "if [ -f /workspace/benchmark.js ]; then /usr/bin/time -v node /workspace/benchmark.js; elif [ -f /workspace/script.js ]; then /usr/bin/time -v node /workspace/script.js; else echo 'PetriBench Node.js Runtime (Multi-stage Optimized)'; echo 'Available tools:'; echo '  - node ($(node --version))'; echo '  - npm ($(npm --version))'; echo '  - /usr/bin/time (GNU time for RSS measurement)'; echo '  - measure_memory (PSS/USS measurement)'; echo '  - /proc/self/smaps_rollup (direct proc parsing)'; echo '  - measure_memory --help (smem2 replacement)'; echo ''; echo 'Size: ~320MB (vs ~430MB single-stage, 25% reduction)'; echo 'Runtime: Node.js + npm + pre-installed packages, no build tools'; echo 'Debian: Full environment preserved for apt-get extensions'; echo 'Packages: Pre-installed from package.json if present'; echo ''; echo 'Usage examples:'; echo '  # Mount source and run:'; echo '  docker run -v script.js:/workspace/script.js petribench-node node script.js'; echo '  docker run -v script.js:/workspace/script.js petribench-node /usr/bin/time -v node script.js'; echo '  # Memory measurement:'; echo '  docker run petribench-node sh -c \"node benchmark.js & measure_memory -P \\$!\"'; echo '  # With package.json:'; echo '  docker build -f Dockerfile.node -t petribench-node .'; fi"]