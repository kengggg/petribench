# Multi-stage build for Python - Separate build tools from runtime
# Build stage: Full Python environment with pip and build tools
FROM ghcr.io/kengggg/petribench-base:latest AS builder

# Switch to root to install packages
USER root

# Install Python with pip and build tools for compiling packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-pip \
        python3-dev \
        build-essential \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch to tester user for package operations
USER tester
WORKDIR /workspace

# Copy requirements and source code for build
COPY --chown=tester:tester . .

# Create local directory and install packages if requirements.txt exists
# Pre-compile Python bytecode for faster startup
RUN mkdir -p /home/tester/.local && \
    if [ -f requirements.txt ]; then \
        echo "Installing Python packages from requirements.txt..."; \
        pip3 install --user --no-cache-dir -r requirements.txt; \
    else \
        echo "No requirements.txt found, skipping package installation"; \
    fi && \
    echo "Pre-compiling Python bytecode..." && \
    python3 -m compileall -b /home/tester/.local/lib/python3.*/site-packages/ 2>/dev/null || true && \
    python3 -m compileall -b . 2>/dev/null || true

# Runtime stage: Minimal Python runtime without build tools
FROM ghcr.io/kengggg/petribench-base:latest

# Switch to root to install packages
USER root

# Install minimal Python runtime + ca-certificates (for https in scripts)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-minimal \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create symbolic link for convenience
RUN ln -sf /usr/bin/python3 /usr/bin/python

# Copy installed packages from build stage
COPY --from=builder /home/tester/.local /home/tester/.local

# Copy source code and compiled bytecode
COPY --from=builder --chown=tester:tester /workspace /workspace

# Ensure proper permissions
RUN chown -R tester:tester /home/tester/.local

# Switch back to non-root user
USER tester

# Set working directory for volume mounts
WORKDIR /workspace

# Add Python-specific labels
LABEL org.opencontainers.image.description="Ultra-minimal Python runtime for memory benchmarking with RSS/PSS/USS measurement"
LABEL python.version="3.12"
LABEL build.type="multi-stage"
LABEL optimization.size="22% reduction vs single-stage"

# Auto-detect and run Python scripts with RSS measurement
CMD ["/bin/sh", "-c", "if [ -f /workspace/benchmark.py ]; then /usr/bin/time -v python3 /workspace/benchmark.py; elif [ -f /workspace/script.py ]; then /usr/bin/time -v python3 /workspace/script.py; else echo 'PetriBench Python Runtime (Multi-stage Optimized)'; echo 'Available tools:'; echo '  - python3 ('$(python3 --version)')'; echo '  - /usr/bin/time (GNU time for RSS measurement)'; echo '  - measure_memory (PSS/USS measurement)'; echo '  - /proc/self/smaps_rollup (direct proc parsing)'; echo '  - measure_memory --help (smem2 replacement)'; echo ''; echo 'Size: ~140MB (vs ~180MB single-stage, 22% reduction)'; echo 'Runtime: Python3 + pre-compiled packages, no build tools'; echo 'Debian: Full environment preserved for apt-get extensions'; echo 'Packages: Pre-installed from requirements.txt if present'; echo ''; echo 'Usage examples:'; echo '  # Mount source and run:'; echo '  docker run -v script.py:/workspace/script.py petribench-python python3 script.py'; echo '  docker run -v script.py:/workspace/script.py petribench-python /usr/bin/time -v python3 script.py'; echo '  # Memory measurement:'; echo '  docker run petribench-python sh -c \"python3 benchmark.py & measure_memory -P \\$!\"'; echo '  # With requirements.txt:'; echo '  docker build -f Dockerfile.python -t petribench-python .'; fi"]